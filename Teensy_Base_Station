
//Includes
#include "xinput.h"
#include <CapacitiveSensor.h>

//General Declarations
#define pinOBLED 13  //Onboard LED pin

//CapSense Definitions
CapacitiveSensor TriggerLeft = CapacitiveSensor(18, 22);
CapacitiveSensor LBBumper = CapacitiveSensor(18, 23);


//dpad array used for updating all of the dpad inputs at once
uint8_t LBVal;
uint8_t dPadREADALL[] = {2, 3, 4, 5};
/*
  //dpad pin assignments
  dpadUP 2
  dpadDN 3
  dpadLT 4
  dpadRT 5
*/
//Button Array used for updating all of the buttons at once
uint8_t buttonStatus[7];

int buttonREADALL[] = {9, 10, 11, 12, 14,  15, 16};

/*
  //button pin assignments
  A_Button 9
  B_Button 10
  X_Button 11
  Y_Button 12
  START_Button 14
  BACK_Button 15
  LOGO_Button 16
*/

uint8_t RHbuttons[3];
//trigger array to update both triggers at once
#define TriggerStatus


int16_t StickOne_X_Val;
int16_t StickOne_Y_Val;
int16_t StickTwo_X_Val;
int16_t StickTwo_Y_Val;
uint8_t TriggerLeftVal;
uint8_t TriggerRightVal;
int8_t dPadStatus[4];






//Initiate the xinput class and setup the LED pin
XINPUT controller(LED_ENABLED, pinOBLED);
//Setup
void setup()
{
  Serial3.begin(115200);
  //calls function to assign pins
  setupPins();
  delay(1000);
}
//void Configure Inputs and Outputs
void setupPins()
{

  for (int x = 0; x < 8; x++) {
    pinMode(buttonREADALL[x], INPUT_PULLUP);
  }
  for (int x = 0; x < 4; x++) {
    pinMode(dPadREADALL[x], INPUT_PULLUP);
  }

  digitalWrite(pinOBLED, LOW);

}

//reads digital buttons and sends
void buttonRead()
{
  //readbuttons
  for (int x = 0; x < 8; x++) {
    int temp = digitalRead(buttonREADALL[x]);
    if (temp == LOW) {
      buttonStatus[x] = 1;
    }
    else if (temp == HIGH) {
      buttonStatus[x] = 0;
    }
  }


  //read dpad
  for (int x = 0; x < 4; x++) {
    int temp = digitalRead(dPadREADALL[x]);
    if (temp == LOW) {
      dPadStatus[x] = 1;
    }
    else if (temp == HIGH) {
      dPadStatus[x] = 0;
    }
  }
}



void CapRead()
{


  int TriggerLeftTemp = TriggerLeft.capacitiveSensor(30);
  int LBTemp = LBBumper.capacitiveSensor(30);

  if (TriggerLeftTemp > 500) {
    TriggerLeftVal = 255;
  }
  else {
    TriggerLeftVal = 0;
  }
  if (LBTemp > 500) {
    LBVal = 1;
  }
  else {
    LBVal = 0;
  }
}




void loop()
{
  buttonRead();
  CapRead();
 char received; //Incoming byte
  if (Serial3.available() > 0) {
    received = Serial3.read();//reads one bit to from serial

    //============If recieved bit is beginning header bit parse the values needed=================//
    if (received == '<') {
      StickOne_X_Val = Serial3.parseInt();
      StickOne_Y_Val = Serial3.parseInt();
      StickTwo_X_Val = Serial3.parseInt();
      StickTwo_Y_Val = Serial3.parseInt();


      for (int x = 0; x < 3; x++) {

        RHbuttons[x] = Serial3.parseInt();

      }
      TriggerRightVal = Serial3.parseInt();

    }

    //===============if received bit is end of message call update function======================//
    else if (received == '>') {
      XUPDATE();
    }
    //===============if received bit is anything else then read from serial to clear it out======//
    else if (received != '<') {
      received = Serial3.read();

    }



  }

  XUPDATE();
}


void XUPDATE() {

  controller.buttonUpdate(BUTTON_RB, RHbuttons[0]);
  controller.buttonUpdate(BUTTON_L3, RHbuttons[1]);
  controller.buttonUpdate(BUTTON_R3, RHbuttons[2]);
  controller.buttonUpdate(BUTTON_A, buttonStatus[0]);
  controller.buttonUpdate(BUTTON_B, buttonStatus[1]);
  controller.buttonUpdate(BUTTON_X, buttonStatus[2]);
  controller.buttonUpdate(BUTTON_Y, buttonStatus[3]);
  controller.buttonUpdate(BUTTON_START, buttonStatus[4]);
  controller.buttonUpdate(BUTTON_BACK, buttonStatus[5]);
  controller.buttonUpdate(BUTTON_LOGO, buttonStatus[6]);
  controller.buttonUpdate(BUTTON_LB, LBVal);
  controller.triggerUpdate(TriggerLeftVal, TriggerRightVal);
  controller.dpadUpdate(dPadStatus[0], dPadStatus[1], dPadStatus[2], dPadStatus[3]);
  controller.stickUpdate(STICK_LEFT, StickTwo_X_Val, StickTwo_Y_Val);
  controller.stickUpdate(STICK_RIGHT, StickOne_X_Val, StickOne_Y_Val);
  //Update the LED display
  controller.LEDUpdate();

  //Send data
  controller.sendXinput();

  //Receive feedback data
  controller.receiveXinput();
}
